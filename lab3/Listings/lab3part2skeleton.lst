


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             lib, CODE, READWRITE
    2 00000000                 EXPORT           lab3
    3 00000000                 EXPORT           pin_connect_block_setup_for_uar
t0
    4 00000000                 EXPORT           uart_init
    5 00000000         
    6 00000000 00000014 
                       U0LSR   EQU              0x14        ; UART0 Line Status
                                                             Register
    7 00000000 00000004 
                       U0IER   EQU              0x4         ; UART0 Interrupt E
                                                            nable Register
    8 00000000 0000000C 
                       U0LCR   EQU              0xC         ; UART0 Line Contro
                                                            l Register
    9 00000000 00000020 
                       THRE    EQU              0x20
   10 00000000         
   11 00000000         ; You'll want to define more constants to make your code
                        easier 
   12 00000000         ; to read and debug
   13 00000000         
   14 00000000         ; Memory allocated for user-entered strings
   15 00000000         
   16 00000000 0C 20 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              4D 45 41 
              4E 20 41 
              4E 44 20 
              52 45 4D 
              41 49 4E 
              44 45 52 
              20 43 41 
              4C 43 55 
              4C 41 54 
              4F 52 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 2D 
              2D 2D 0D 
              0A 0D 0A 
              50 6C 65 
              61 73 65 
              20 20 66 
              6F 6C 6C 
              6F 77 20 
              74 68 65 
              20 66 6F 



ARM Macro Assembler    Page 2 


              6C 6C 6F 
              77 69 6E 
              67 20 73 
              74 65 70 
              3A 20 00 prompt1 =                "\f ----------------------MEAN 
AND REMAINDER CALCULATOR---------------------------\r\n\r\nPlease  follow the f
ollowing step: ",0
   17 00000078 0D 0A 31 
              2E 20 45 
              6E 74 65 
              72 20 31 
              20 74 6F 
              20 31 35 
              20 6E 75 
              6D 62 65 
              72 73 20 
              66 72 6F 
              6D 20 2D 
              39 39 39 
              39 20 74 
              6F 20 2B 
              39 39 39 
              39 20 77 
              69 74 68 
              20 74 68 
              65 20 73 
              69 67 6E 
              20 2B 20 
              6F 72 20 
              2D 0D 0A 
              32 2E 20 
              50 72 65 
              73 73 20 
              74 68 65 
              20 6B 65 
              79 20 5B 
              45 6E 74 
              65 72 5D 
              20 65 76 
              65 72 79 
              20 74 69 
              6D 65 20 
              61 66 74 
              65 72 20 
              79 6F 75 
              20 69 6E 
              70 75 74 
              20 74 68 
              65 20 6E 
              75 6D 62 
              65 72 00 prompt2 =                "\r\n1. Enter 1 to 15 numbers f
rom -9999 to +9999 with the sign + or -\r\n2. Press the key [Enter] every time 
after you input the number", 0
   18 000000FC 0D 0A 33 
              2E 20 65 
              6E 74 65 
              72 20 71 
              20 77 68 
              65 6E 20 



ARM Macro Assembler    Page 3 


              79 6F 75 
              20 61 72 
              65 20 66 
              69 6E 69 
              73 68 65 
              64 20 65 
              6E 74 65 
              72 69 6E 
              67 20 6E 
              75 6D 62 
              65 72 73 
              0D 0A 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 45 
              78 61 6D 
              70 6C 65 
              3A 20 45 
              6E 74 65 
              72 20 61 
              20 6E 75 
              6D 62 65 
              72 3A 20 
              2B 33 36 
              28 70 72 
              65 73 73 
              20 45 6E 
              74 65 72 
              29 00    prompt3 =                "\r\n3. enter q when you are fi
nished entering numbers\r\n               Example: Enter a number: +36(press En
ter)",0
   19 0000016A 0D 0A 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 2D 
              32 30 28 
              70 72 65 
              73 73 20 
              45 6E 74 
              65 72 29 
              0D 0A 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 20 
              20 20 71 
              0D 0A 0D 
              0A 45 6E 
              74 65 72 
              20 61 20 
              6E 75 6D 
              62 65 72 
              3A 20 00 prompt4 =                "\r\n               -20(press E
nter)\r\n               q\r\n\r\nEnter a number: ",0
   20 000001B2 0D 0A 54 



ARM Macro Assembler    Page 4 


              68 65 20 
              6D 65 61 
              6E 20 69 
              73 20 3A 
              20 20 00 mean    =                "\r\nThe mean is :  ",0
   21 000001C4 0D 0A 54 
              68 65 20 
              72 65 6D 
              61 69 6E 
              64 65 72 
              20 69 73 
              3A 20 00 remainder
                               =                "\r\nThe remainder is: ",0
   22 000001D9 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       buffer1 =                "\0\0\0\0\0\0\0\0\0\0\0\0",0
   23 000001E6 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       buffer2 =                "\0\0\0\0\0\0\0\0\0\0\0\0",0
   24 000001F3         ; Additional strings may be defined here
   25 000001F3         
   26 000001F3 00              ALIGN
   27 000001F4         
   28 000001F4         uart_init
   29 000001F4 E92D4000        STMFD            SP!,{lr}
   30 000001F8         
   31 000001F8 E59F02DC        LDR              r0, =0xE000C000
   32 000001FC E3A01083        MOV              r1, #0x83
   33 00000200 E5C0100C        STRB             r1, [r0, #U0LCR]
   34 00000204         
   35 00000204 E3A01078        MOV              r1, #0x78
   36 00000208 E5C01000        STRB             r1, [r0]
   37 0000020C         
   38 0000020C E3A01000        MOV              r1, #0x0
   39 00000210 E5C01004        STRB             r1, [r0, #U0IER]
   40 00000214         
   41 00000214 E3A01003        MOV              r1, #0x3
   42 00000218 E5C0100C        STRB             r1, [r0, #U0LCR]
   43 0000021C         
   44 0000021C E8BD4000        LDMFD            sp!, {lr}
   45 00000220 E12FFF1E        BX               lr
   46 00000224         
   47 00000224         
   48 00000224         
   49 00000224         lab3
   50 00000224         ; Main code
   51 00000224 E92D4000        STMFD            SP!,{lr}    ; Store register lr
                                                             on stack
   52 00000228         ;Instantiations for output of prompt and instruction
   53 00000228 E59F12B0        LDR              r1, =0xE000C014
   54 0000022C E59F32A8        LDR              r3, =0xE000C000
   55 00000230 E59F42AC        LDR              r4, =prompt1 ; Sets the r4 equa
                                                            l to prompt which i
                                                            s to be printed
   56 00000234 E3A09000        MOV              r9, #0      ;intialize dividend



ARM Macro Assembler    Page 5 


                                                            
   57 00000238 E3A05000        MOV              r5, #0      ;intialize divisor
   58 0000023C         
   59 0000023C EB000027        BL               output_string ;This branch will
                                                             print out the UI /
                                                            prompt for the user
                                                            
   60 00000240 E59F42A0        LDR              r4, =prompt2
   61 00000244 EB000025        BL               output_string
   62 00000248 E59F429C        LDR              r4, =prompt3
   63 0000024C EB000023        BL               output_string
   64 00000250 E59F4298        LDR              r4, =prompt4
   65 00000254 EB000021        BL               output_string
   66 00000258         
   67 00000258 EB000029        BL               read_string ;reads in strings o
                                                            f numbers 
   68 0000025C         
   69 0000025C E3A0000A        MOV              r0, #0xA    ; printing new line
                                                            
   70 00000260 EB000018        BL               output_character
   71 00000264 E3A0000D        MOV              r0, #0xD    ; printing carriage
                                                             return
   72 00000268 EB000016        BL               output_character
   73 0000026C         
   74 0000026C EB00004C        BL               div_mod
   75 00000270         ;Convert number to string. 
   76 00000270 E1A06005        MOV              r6, r5      ;stores the remaind
                                                            er into r6 for late
                                                            r use 
   77 00000274 E59F4278        LDR              r4, =buffer1
   78 00000278 EB00006B        BL               convert_to_string
   79 0000027C E59F4274        LDR              r4, =mean
   80 00000280         ;end of conversion
   81 00000280         
   82 00000280         
   83 00000280         
   84 00000280         
   85 00000280 EB000016        BL               output_string
   86 00000284 E59F4268        LDR              r4, =buffer1
   87 00000288 EB000014        BL               output_string
   88 0000028C E1A09006        MOV              r9, r6
   89 00000290 E59F4264        LDR              r4, =buffer2
   90 00000294 EB000064        BL               convert_to_string
   91 00000298 E59F4260        LDR              r4, =remainder
   92 0000029C EB00000F        BL               output_string
   93 000002A0 E59F4254        LDR              r4, =buffer2
   94 000002A4 EB00000D        BL               output_string
   95 000002A8         
   96 000002A8 E8BD4000        LDMFD            sp!, {lr}
   97 000002AC E12FFF1E        BX               lr
   98 000002B0         ;end of main code
   99 000002B0         
  100 000002B0         ;///////////////////////////////////////////////////////
                       // 
  101 000002B0         
  102 000002B0         read_character
  103 000002B0         
  104 000002B0 E5912000        LDR              r2, [r1]
  105 000002B4 E2022001        AND              r2, r2, #1



ARM Macro Assembler    Page 6 


  106 000002B8 E3520000        CMP              r2, #0
  107 000002BC         
  108 000002BC 0AFFFFFB        BEQ              read_character
  109 000002C0         
  110 000002C0 E5930000        LDR              r0, [r3]    ;Read byte from rec
                                                            eive register
  111 000002C4         
  112 000002C4 E12FFF1E        BX               lr
  113 000002C8         
  114 000002C8         ;///////////////////////////////////////////////////////
                       // 
  115 000002C8         
  116 000002C8         output_character
  117 000002C8         
  118 000002C8 E5912000        LDR              r2, [r1]
  119 000002CC E2022020        AND              r2, r2, #THRE ; Isolates the TH
                                                            RE bit of the statu
                                                            s register and stor
                                                            es result to r5
  120 000002D0 E3520020        CMP              r2, #THRE   ; Compares mask to 
                                                            isolated THRE bit
  121 000002D4         
  122 000002D4 1AFFFFFB        BNE              output_character ; If the isola
                                                            ted bit isn't equal
                                                             to the mask goes b
                                                            ack to loop
  123 000002D8         
  124 000002D8 E5830000        STR              r0, [r3]    ; Stores character 
                                                            to the transmit reg
                                                            ister
  125 000002DC         
  126 000002DC E12FFF1E        BX               lr
  127 000002E0         
  128 000002E0         ;///////////////////////////////////////////////////////
                       //
  129 000002E0         
  130 000002E0         output_string
  131 000002E0 E92D4000        STMFD            SP!,{lr}
  132 000002E4         output_string_begin
  133 000002E4 E5D40000        LDRB             r0, [r4]
  134 000002E8 E3500000        CMP              r0, #0      ; comparing for nul
                                                            l
  135 000002EC 0A000002        BEQ              output_string_exit ;If characte
                                                            r is null branch to
                                                             the exit of output
                                                             string
  136 000002F0         
  137 000002F0 E2844001        ADD              r4, r4, #1
  138 000002F4 EBFFFFF3        BL               output_character
  139 000002F8 EAFFFFF9        B                output_string_begin
  140 000002FC         
  141 000002FC         output_string_exit
  142 000002FC         
  143 000002FC E8BD4000        LDMFD            sp!, {lr}   ;load return addres
                                                            s of lr
  144 00000300 E12FFF1E        BX               lr          ;branches back to m
                                                            ain code
  145 00000304         
  146 00000304         ;///////////////////////////////////////////////////////



ARM Macro Assembler    Page 7 


                       //
  147 00000304         
  148 00000304         read_string
  149 00000304 E92D4000        STMFD            SP!,{lr}
  150 00000308         
  151 00000308 E3A06000        MOV              r6, #0
  152 0000030C         
  153 0000030C         read_string_begin
  154 0000030C EBFFFFE7        BL               read_character ;read inputed ch
                                                            aracter
  155 00000310 E3500071        CMP              r0, #0x71   ;checking for q
  156 00000314 0A00001F        BEQ              read_string_exit ;Branches to e
                                                            xit of read string 
                                                            loop
  157 00000318         
  158 00000318 E350000D        CMP              r0, #0xD    ; checking for ente
                                                            r
  159 0000031C 0A000011        BEQ              read_string_enter
  160 00000320         
  161 00000320         ;record +
  162 00000320 E350002B        CMP              r0, #0x2B
  163 00000324 1A000002        BNE              plus_continue
  164 00000328 E3A08000        MOV              r8, #0
  165 0000032C EBFFFFE5        BL               output_character
  166 00000330 EAFFFFF5        B                read_string_begin
  167 00000334         
  168 00000334         plus_continue
  169 00000334         
  170 00000334         
  171 00000334         ;record -
  172 00000334 E350002D        CMP              r0, #0x2D
  173 00000338 1A000002        BNE              neither_continue ; branches to 
                                                            the label where cha
                                                            racter is a number
  174 0000033C E3A08001        MOV              r8, #1
  175 00000340 EBFFFFE0        BL               output_character
  176 00000344 EAFFFFF0        B                read_string_begin
  177 00000348         
  178 00000348         neither_continue
  179 00000348 EBFFFFDE        BL               output_character
  180 0000034C         
  181 0000034C         ;     r6 = interger value of  one string
  182 0000034C         ;     r7 = temp for calculating
  183 0000034C         ;     r8 = sign recorder + -
  184 0000034C         ;     r9 = The sum of the   
  185 0000034C         
  186 0000034C         ; Conversion from string to decimal via shifting
  187 0000034C E2400030        SUB              r0, r0, #48 ;subtracts string t
                                                            o integer number 0-
                                                            9
  188 00000350 E1A07186        MOV              r7, r6, LSL #3 ;multiplies by r
                                                            6 by 8 then stores 
                                                            in r7
  189 00000354 E0877006        ADD              r7, r7, r6  ; adds to r7 r6
  190 00000358 E0877006        ADD              r7, r7, r6  ; adds to r7 r6 whi
                                                            ch is equivalent to
                                                             r6 * 10
  191 0000035C E0877000        ADD              r7, r7, r0
  192 00000360         ; end of conversion from hexadecimal to decimal 



ARM Macro Assembler    Page 8 


  193 00000360         
  194 00000360 E1A06007        MOV              r6, r7      ; moves the decimal
                                                             value of string to
                                                             r6 
  195 00000364         
  196 00000364         
  197 00000364 EAFFFFE8        B                read_string_begin
  198 00000368         
  199 00000368         read_string_enter
  200 00000368         
  201 00000368 E3A07000        MOV              r7, #0      ; sets r7 which is 
                                                            a temp register bac
                                                            k to 0
  202 0000036C E3580001        CMP              r8, #1      ; compares register
                                                             8 to 1 or 0. 0 is 
                                                            positive 1 is negat
                                                            ive
  203 00000370 1A000000        BNE              Posi_number ;uses the sign to c
                                                            hoose addition or s
                                                            ubtraction
  204 00000374 E0476006        SUB              r6, r7, r6
  205 00000378         Posi_number
  206 00000378         
  207 00000378 E2855001        ADD              r5, r5, #1
  208 0000037C E0899006        ADD              r9, r9, r6
  209 00000380         ;unsigned number is positive
  210 00000380         
  211 00000380 E3A0000A        MOV              r0, #0xA    ; printing new line
                                                            
  212 00000384 EBFFFFCF        BL               output_character
  213 00000388 E3A0000D        MOV              r0, #0xD    ; printing carriage
                                                             return
  214 0000038C EBFFFFCD        BL               output_character
  215 00000390 E3A06000        MOV              r6, #0      ; resets the value 
                                                            of r6 back to 0 for
                                                             repetition of the 
                                                            loop
  216 00000394 EAFFFFDC        B                read_string_begin
  217 00000398         
  218 00000398         read_string_exit
  219 00000398 EBFFFFCA        BL               output_character
  220 0000039C         
  221 0000039C E8BD4000        LDMFD            sp!, {lr}   ;load return addres
                                                            s of lr
  222 000003A0 E12FFF1E        BX               lr          ;branches back to m
                                                            ain code
  223 000003A4         
  224 000003A4         ;///////////////////////////////////////////////////////
                       //
  225 000003A4         div_mod
  226 000003A4         ;r5 = Divisor
  227 000003A4         ;r9 = Dividend
  228 000003A4         ;r10 = Counter
  229 000003A4         ;r11 = Quotient
  230 000003A4         ;r12 = Remainder
  231 000003A4         ;r8 = +- counter
  232 000003A4         
  233 000003A4 E3A0B000        MOV              r11, #0
  234 000003A8 E3A08000        MOV              r8, #0



ARM Macro Assembler    Page 9 


  235 000003AC         ;Divisor > 0?
  236 000003AC E3550000        CMP              r5, #0
  237 000003B0 CA000001        BGT              divisor_positive
  238 000003B4         ;NO, Divisor < 0, get it positive
  239 000003B4 E04B5005        SUB              r5, r11, r5
  240 000003B8 E2888001        ADD              r8, r8, #1
  241 000003BC         ;Now Divisor > 0
  242 000003BC         ;Dividend > 0?
  243 000003BC         divisor_positive
  244 000003BC E3590000        CMP              r9, #0
  245 000003C0 CA000001        BGT              both_positive
  246 000003C4         ;NO, Dividend < 0, get it positive
  247 000003C4 E04B9009        SUB              r9, r11, r9
  248 000003C8 E2488001        SUB              r8, r8, #1
  249 000003CC         ;Now Divisor > 0 and Dividend > 0
  250 000003CC         
  251 000003CC         both_positive
  252 000003CC E3A0A010        MOV              r10, #16
  253 000003D0 E3A0B000        MOV              r11, #0
  254 000003D4 E1A05805        MOV              r5, r5, LSL #16
  255 000003D8 E1A0C009        MOV              r12, r9
  256 000003DC EA000000        B                DIV_BEGIN
  257 000003E0         
  258 000003E0         L_START
  259 000003E0 E24AA001        SUB              r10, r10, #1
  260 000003E4         DIV_BEGIN
  261 000003E4 E04CC005        SUB              r12, r12, r5
  262 000003E8         
  263 000003E8 E35C0000        CMP              r12, #0
  264 000003EC BA000002        BLT              YES         ;when Remainder is 
                                                            >= 0
  265 000003F0 E1A0B08B        MOV              r11, r11, LSL #1
  266 000003F4 E28BB001        ADD              r11, r11, #1
  267 000003F8 EA000001        B                END_B
  268 000003FC         
  269 000003FC         YES                                  ;when Remainder < 0
                                                            
  270 000003FC E08CC005        ADD              r12, r12, r5
  271 00000400 E1A0B08B        MOV              r11, r11, LSL #1
  272 00000404         
  273 00000404         END_B
  274 00000404 E1A050A5        MOV              r5, r5, LSR #1 ;when Counter > 
                                                            0, go in LOOP_START
                                                            
  275 00000408 E35A0000        CMP              r10, #0
  276 0000040C CAFFFFF3        BGT              L_START     ;when Counter <= 0 
                                                               STOP LOOP
  277 00000410 E1A0500C        MOV              r5, r12     ;r5 is the remainde
                                                            r
  278 00000414         ;if r8 == 0 then quotient should be positive
  279 00000414 E3580000        CMP              r8, #0
  280 00000418 0A000001        BEQ              P_FINAL
  281 0000041C E3A08000        MOV              r8, #0
  282 00000420 E048B00B        SUB              r11, r8, r11
  283 00000424         
  284 00000424         P_FINAL
  285 00000424 E1A0900B        MOV              r9, r11     ;r9 is the quotient
                                                              
  286 00000428         



ARM Macro Assembler    Page 10 


  287 00000428 E12FFF1E        BX               lr
  288 0000042C         ;///////////////////////////////////////////////////////
                       //
  289 0000042C         ;this subroutine will compare the quotient and remainder
                        to 1000 ,100 ,10 ,1 
  290 0000042C         convert_to_string
  291 0000042C E92D4000        STMFD            SP!,{lr}
  292 00000430         ;r5 divisor where we will use 1000, 100, 10, 1
  293 00000430         
  294 00000430 E3590000        CMP              r9, #0
  295 00000434 0A00000A        BEQ              convert_to_string_begin
  296 00000438         
  297 00000438 E3590000        CMP              r9, #0
  298 0000043C CA000005        BGT              Posi_string
  299 00000440 E3A0502D        MOV              r5, #45
  300 00000444 E5C45000        STRB             r5, [r4]
  301 00000448 E2844001        ADD              r4, r4, #1  ;insert - at the be
                                                            ginning of the stri
                                                            ng
  302 0000044C         
  303 0000044C E3A05000        MOV              r5, #0
  304 00000450 E0459009        SUB              r9, r5, r9  ;Set the num to be 
                                                            positive
  305 00000454 EA000002        B                convert_to_string_begin
  306 00000458         
  307 00000458         Posi_string
  308 00000458 E3A0502B        MOV              r5, #43
  309 0000045C E5C45000        STRB             r5, [r4]
  310 00000460 E2844001        ADD              r4, r4, #1  ;insert + at the be
                                                            ginning of the stri
                                                            ng
  311 00000464         
  312 00000464         convert_to_string_begin
  313 00000464         
  314 00000464 E3590FFA        CMP              r9, #1000
  315 00000468 BA000001        BLT              compare_100
  316 0000046C E3A05FFA        MOV              r5, #1000
  317 00000470 EA000008        B                converting
  318 00000474         
  319 00000474         compare_100
  320 00000474 E3590064        CMP              r9, #100
  321 00000478 BA000001        BLT              compare_10
  322 0000047C E3A05064        MOV              r5, #100
  323 00000480 EA000004        B                converting
  324 00000484         
  325 00000484         compare_10
  326 00000484 E359000A        CMP              r9, #10
  327 00000488 BA000001        BLT              one
  328 0000048C E3A0500A        MOV              r5, #10
  329 00000490 EA000000        B                converting
  330 00000494         
  331 00000494         one
  332 00000494 E3A05001        MOV              r5, #1
  333 00000498         converting
  334 00000498 EBFFFFC1        BL               div_mod
  335 0000049C E2899030        ADD              r9,r9, #48
  336 000004A0 E5C49000        STRB             r9, [r4]
  337 000004A4 E2844001        ADD              r4, r4, #1
  338 000004A8 E1A09005        MOV              r9, r5



ARM Macro Assembler    Page 11 


  339 000004AC E3550000        CMP              r5,#0
  340 000004B0 1AFFFFEB        BNE              convert_to_string_begin
  341 000004B4         
  342 000004B4 E8BD4000        LDMFD            sp!, {lr}
  343 000004B8 E12FFF1E        BX               lr
  344 000004BC         
  345 000004BC         
  346 000004BC         ;///////////////////////////////////////////////////////
                       //
  347 000004BC         pin_connect_block_setup_for_uart0
  348 000004BC E92D4003        STMFD            sp!, {r0, r1, lr}
  349 000004C0 E59F003C        LDR              r0, =0xE002C000 ; PINSEL0
  350 000004C4 E5901000        LDR              r1, [r0]
  351 000004C8 E3811005        ORR              r1, r1, #5
  352 000004CC E3C1100A        BIC              r1, r1, #0xA
  353 000004D0 E5801000        STR              r1, [r0]
  354 000004D4 E8BD4003        LDMFD            sp!, {r0, r1, lr}
  355 000004D8 E12FFF1E        BX               lr
  356 000004DC         
  357 000004DC         
  358 000004DC         
  359 000004DC                 END
              E000C000 
              E000C014 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E002C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\lab3part2skeleton.d -o.\objects\lab3part2skeleton.o -IC:\Keil_v5\ARM\RV3
1\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="
__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 524" --list=.\listings\lab3p
art2skeleton.lst lab3part2skeleton.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DIV_BEGIN 000003E4

Symbol: DIV_BEGIN
   Definitions
      At line 260 in file lab3part2skeleton.s
   Uses
      At line 256 in file lab3part2skeleton.s
Comment: DIV_BEGIN used once
END_B 00000404

Symbol: END_B
   Definitions
      At line 273 in file lab3part2skeleton.s
   Uses
      At line 267 in file lab3part2skeleton.s
Comment: END_B used once
L_START 000003E0

Symbol: L_START
   Definitions
      At line 258 in file lab3part2skeleton.s
   Uses
      At line 276 in file lab3part2skeleton.s
Comment: L_START used once
P_FINAL 00000424

Symbol: P_FINAL
   Definitions
      At line 284 in file lab3part2skeleton.s
   Uses
      At line 280 in file lab3part2skeleton.s
Comment: P_FINAL used once
Posi_number 00000378

Symbol: Posi_number
   Definitions
      At line 205 in file lab3part2skeleton.s
   Uses
      At line 203 in file lab3part2skeleton.s
Comment: Posi_number used once
Posi_string 00000458

Symbol: Posi_string
   Definitions
      At line 307 in file lab3part2skeleton.s
   Uses
      At line 298 in file lab3part2skeleton.s
Comment: Posi_string used once
YES 000003FC

Symbol: YES
   Definitions
      At line 269 in file lab3part2skeleton.s
   Uses
      At line 264 in file lab3part2skeleton.s
Comment: YES used once
both_positive 000003CC

Symbol: both_positive



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 251 in file lab3part2skeleton.s
   Uses
      At line 245 in file lab3part2skeleton.s
Comment: both_positive used once
buffer1 000001D9

Symbol: buffer1
   Definitions
      At line 22 in file lab3part2skeleton.s
   Uses
      At line 77 in file lab3part2skeleton.s
      At line 86 in file lab3part2skeleton.s

buffer2 000001E6

Symbol: buffer2
   Definitions
      At line 23 in file lab3part2skeleton.s
   Uses
      At line 89 in file lab3part2skeleton.s
      At line 93 in file lab3part2skeleton.s

compare_10 00000484

Symbol: compare_10
   Definitions
      At line 325 in file lab3part2skeleton.s
   Uses
      At line 321 in file lab3part2skeleton.s
Comment: compare_10 used once
compare_100 00000474

Symbol: compare_100
   Definitions
      At line 319 in file lab3part2skeleton.s
   Uses
      At line 315 in file lab3part2skeleton.s
Comment: compare_100 used once
convert_to_string 0000042C

Symbol: convert_to_string
   Definitions
      At line 290 in file lab3part2skeleton.s
   Uses
      At line 78 in file lab3part2skeleton.s
      At line 90 in file lab3part2skeleton.s

convert_to_string_begin 00000464

Symbol: convert_to_string_begin
   Definitions
      At line 312 in file lab3part2skeleton.s
   Uses
      At line 295 in file lab3part2skeleton.s
      At line 305 in file lab3part2skeleton.s
      At line 340 in file lab3part2skeleton.s

converting 00000498



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: converting
   Definitions
      At line 333 in file lab3part2skeleton.s
   Uses
      At line 317 in file lab3part2skeleton.s
      At line 323 in file lab3part2skeleton.s
      At line 329 in file lab3part2skeleton.s

div_mod 000003A4

Symbol: div_mod
   Definitions
      At line 225 in file lab3part2skeleton.s
   Uses
      At line 74 in file lab3part2skeleton.s
      At line 334 in file lab3part2skeleton.s

divisor_positive 000003BC

Symbol: divisor_positive
   Definitions
      At line 243 in file lab3part2skeleton.s
   Uses
      At line 237 in file lab3part2skeleton.s
Comment: divisor_positive used once
lab3 00000224

Symbol: lab3
   Definitions
      At line 49 in file lab3part2skeleton.s
   Uses
      At line 2 in file lab3part2skeleton.s
Comment: lab3 used once
lib 00000000

Symbol: lib
   Definitions
      At line 1 in file lab3part2skeleton.s
   Uses
      None
Comment: lib unused
mean 000001B2

Symbol: mean
   Definitions
      At line 20 in file lab3part2skeleton.s
   Uses
      At line 79 in file lab3part2skeleton.s
Comment: mean used once
neither_continue 00000348

Symbol: neither_continue
   Definitions
      At line 178 in file lab3part2skeleton.s
   Uses
      At line 173 in file lab3part2skeleton.s
Comment: neither_continue used once
one 00000494



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: one
   Definitions
      At line 331 in file lab3part2skeleton.s
   Uses
      At line 327 in file lab3part2skeleton.s
Comment: one used once
output_character 000002C8

Symbol: output_character
   Definitions
      At line 116 in file lab3part2skeleton.s
   Uses
      At line 70 in file lab3part2skeleton.s
      At line 72 in file lab3part2skeleton.s
      At line 122 in file lab3part2skeleton.s
      At line 138 in file lab3part2skeleton.s
      At line 165 in file lab3part2skeleton.s
      At line 175 in file lab3part2skeleton.s
      At line 179 in file lab3part2skeleton.s
      At line 212 in file lab3part2skeleton.s
      At line 214 in file lab3part2skeleton.s
      At line 219 in file lab3part2skeleton.s

output_string 000002E0

Symbol: output_string
   Definitions
      At line 130 in file lab3part2skeleton.s
   Uses
      At line 59 in file lab3part2skeleton.s
      At line 61 in file lab3part2skeleton.s
      At line 63 in file lab3part2skeleton.s
      At line 65 in file lab3part2skeleton.s
      At line 85 in file lab3part2skeleton.s
      At line 87 in file lab3part2skeleton.s
      At line 92 in file lab3part2skeleton.s
      At line 94 in file lab3part2skeleton.s

output_string_begin 000002E4

Symbol: output_string_begin
   Definitions
      At line 132 in file lab3part2skeleton.s
   Uses
      At line 139 in file lab3part2skeleton.s
Comment: output_string_begin used once
output_string_exit 000002FC

Symbol: output_string_exit
   Definitions
      At line 141 in file lab3part2skeleton.s
   Uses
      At line 135 in file lab3part2skeleton.s
Comment: output_string_exit used once
pin_connect_block_setup_for_uart0 000004BC

Symbol: pin_connect_block_setup_for_uart0
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 347 in file lab3part2skeleton.s
   Uses
      At line 3 in file lab3part2skeleton.s
Comment: pin_connect_block_setup_for_uart0 used once
plus_continue 00000334

Symbol: plus_continue
   Definitions
      At line 168 in file lab3part2skeleton.s
   Uses
      At line 163 in file lab3part2skeleton.s
Comment: plus_continue used once
prompt1 00000000

Symbol: prompt1
   Definitions
      At line 16 in file lab3part2skeleton.s
   Uses
      At line 55 in file lab3part2skeleton.s
Comment: prompt1 used once
prompt2 00000078

Symbol: prompt2
   Definitions
      At line 17 in file lab3part2skeleton.s
   Uses
      At line 60 in file lab3part2skeleton.s
Comment: prompt2 used once
prompt3 000000FC

Symbol: prompt3
   Definitions
      At line 18 in file lab3part2skeleton.s
   Uses
      At line 62 in file lab3part2skeleton.s
Comment: prompt3 used once
prompt4 0000016A

Symbol: prompt4
   Definitions
      At line 19 in file lab3part2skeleton.s
   Uses
      At line 64 in file lab3part2skeleton.s
Comment: prompt4 used once
read_character 000002B0

Symbol: read_character
   Definitions
      At line 102 in file lab3part2skeleton.s
   Uses
      At line 108 in file lab3part2skeleton.s
      At line 154 in file lab3part2skeleton.s

read_string 00000304

Symbol: read_string
   Definitions
      At line 148 in file lab3part2skeleton.s
   Uses



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 67 in file lab3part2skeleton.s
Comment: read_string used once
read_string_begin 0000030C

Symbol: read_string_begin
   Definitions
      At line 153 in file lab3part2skeleton.s
   Uses
      At line 166 in file lab3part2skeleton.s
      At line 176 in file lab3part2skeleton.s
      At line 197 in file lab3part2skeleton.s
      At line 216 in file lab3part2skeleton.s

read_string_enter 00000368

Symbol: read_string_enter
   Definitions
      At line 199 in file lab3part2skeleton.s
   Uses
      At line 159 in file lab3part2skeleton.s
Comment: read_string_enter used once
read_string_exit 00000398

Symbol: read_string_exit
   Definitions
      At line 218 in file lab3part2skeleton.s
   Uses
      At line 156 in file lab3part2skeleton.s
Comment: read_string_exit used once
remainder 000001C4

Symbol: remainder
   Definitions
      At line 21 in file lab3part2skeleton.s
   Uses
      At line 91 in file lab3part2skeleton.s
Comment: remainder used once
uart_init 000001F4

Symbol: uart_init
   Definitions
      At line 28 in file lab3part2skeleton.s
   Uses
      At line 4 in file lab3part2skeleton.s
Comment: uart_init used once
39 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

THRE 00000020

Symbol: THRE
   Definitions
      At line 9 in file lab3part2skeleton.s
   Uses
      At line 119 in file lab3part2skeleton.s
      At line 120 in file lab3part2skeleton.s

U0IER 00000004

Symbol: U0IER
   Definitions
      At line 7 in file lab3part2skeleton.s
   Uses
      At line 39 in file lab3part2skeleton.s
Comment: U0IER used once
U0LCR 0000000C

Symbol: U0LCR
   Definitions
      At line 8 in file lab3part2skeleton.s
   Uses
      At line 33 in file lab3part2skeleton.s
      At line 42 in file lab3part2skeleton.s

U0LSR 00000014

Symbol: U0LSR
   Definitions
      At line 6 in file lab3part2skeleton.s
   Uses
      None
Comment: U0LSR unused
4 symbols
377 symbols in table
