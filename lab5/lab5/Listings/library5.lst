


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             lib, CODE, READWRITE
    2 00000000                 EXPORT           read_character
    3 00000000                 EXPORT           output_character
    4 00000000                 EXPORT           output_string
    5 00000000                 EXPORT           read_string
    6 00000000                 EXPORT           pin_connect_block_setup_for_uar
t0
    7 00000000                 EXPORT           uart_init
    8 00000000                 EXPORT           display_digit_on_7_seg
    9 00000000                 EXPORT           setup
   10 00000000         
   11 00000000         
   12 00000000         
   13 00000000 00000014 
                       U0LSR   EQU              0x14        ; UART0 Line Status
                                                             Register
   14 00000000 00000004 
                       U0IER   EQU              0x4         ; UART0 Interrupt E
                                                            nable Register
   15 00000000 0000000C 
                       U0LCR   EQU              0xC         ; UART0 Line Contro
                                                            l Register
   16 00000000 00000020 
                       THRE    EQU              0x20
   17 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   18 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010
   19 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   20 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   21 00000000 E0028008 
                       IO0DIR  EQU              0xE0028008
   22 00000000 E0028000 
                       IO0SET  EQU              0xE0028000
   23 00000000 E002800C 
                       IO0CLR  EQU              0xE002800C
   24 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
   25 00000000         
   26 00000000         ;Hexdecimal hard code
   27 00000000 0000B7A0 
                       Seg     EQU              0xB7A0
   28 00000000 00008000 
                       Hex_g   EQU              0x8000
   29 00000000 00003780 
                       Hex_0   EQU              0x3780
   30 00000000 00000300 
                       Hex_1   EQU              0x300
   31 00000000 00009580 
                       Hex_2   EQU              0x9580
   32 00000000 00008780 
                       Hex_3   EQU              0x8780
   33 00000000 0000A300 
                       Hex_4   EQU              0xA300
   34 00000000 0000A680 
                       Hex_5   EQU              0xA680
   35 00000000 0000B680 



ARM Macro Assembler    Page 2 


                       Hex_6   EQU              0xB680
   36 00000000 00000380 
                       Hex_7   EQU              0x0380
   37 00000000 0000B780 
                       Hex_8   EQU              0xB780
   38 00000000 0000A380 
                       Hex_9   EQU              0xA380
   39 00000000 0000B380 
                       Hex_a   EQU              0xB380
   40 00000000 0000B600 
                       Hex_b   EQU              0xB600
   41 00000000 00003480 
                       Hex_c   EQU              0x3480
   42 00000000 00009700 
                       Hex_d   EQU              0x9700
   43 00000000 0000B480 
                       Hex_e   EQU              0xB480
   44 00000000 0000B080 
                       Hex_f   EQU              0xB080
   45 00000000 0000B7A0 
                       Hex_off EQU              0xB7A0
   46 00000000         
   47 00000000         
   48 00000000         
   49 00000000         
   50 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       buffer  =                "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",0
   51 000000A9 49 6E 74 
              65 72 72 
              75 70 74 
              00       prompt1 =                "Interrupt",0
   52 000000B3         
   53 000000B3 00              ALIGN
   54 000000B4         
   55 000000B4         
   56 000000B4         
   57 000000B4         ;///////////////////////////////////////////////////////
                       /
   58 000000B4         
   59 000000B4         ;This routine takes in a buffer which we then clear by c
                       hanging every non null character to a null 
   60 000000B4         ;Terminates after the end of string is reach in other wo
                       rds a null character is reached
   61 000000B4         
   62 000000B4         clear_string
   63 000000B4 E92D4009        STMFD            sp!,{lr, r0, r3}
   64 000000B8         
   65 000000B8         clear
   66 000000B8 E5D40000        LDRB             r0, [r4]
   67 000000BC E3500000        CMP              r0, #0      ; comparing for nul
                                                            l
   68 000000C0 0A000003        BEQ              clear_exit
   69 000000C4 E3A03000        LDR              r3, =0x0
   70 000000C8 E5843000        STR              r3, [r4]
   71 000000CC E2844001        ADD              r4, r4, #1
   72 000000D0         
   73 000000D0 EAFFFFF8        B                clear
   74 000000D4         
   75 000000D4         clear_exit



ARM Macro Assembler    Page 4 


   76 000000D4 E8BD4009        LDMFD            sp!,{lr, r0, r3}
   77 000000D8 E12FFF1E        BX               lr
   78 000000DC         
   79 000000DC         ;///////////////////////////////////////////////////////
                       /
   80 000000DC         display_digit_on_7_seg               ;input=r0
   81 000000DC         
   82 000000DC         ;Display subroutine works by writing a specific hexadeci
                       mal to IO0SET.
   83 000000DC         ;This hexadecmial specifies which segment to turn on.
   84 000000DC         
   85 000000DC E92D402C        STMFD            SP!,{r2,r3,r5,lr}
   86 000000E0         
   87 000000E0 E59F2234        LDR              r2, =IO0SET ;Set register
   88 000000E4 E59F3234        LDR              r3, =IO0CLR ;Port 0 clear regis
                                                            ter 
   89 000000E8         
   90 000000E8 E3570000        CMP              r7, #0      ; This blocks turns
                                                             on the led if r7 i
                                                            s negative, off whe
                                                            n r7 is positive
   91 000000EC E59F5230        LDR              r5, =Hex_off
   92 000000F0 CA000037        BGT              off_seg
   93 000000F4         
   94 000000F4 E3500030        CMP              r0, #48
   95 000000F8 E3A05DDE        LDR              r5, =Hex_0  ;7 seg displays 0 
   96 000000FC 0A000032        BEQ              display
   97 00000100         
   98 00000100 E3500031        CMP              r0, #49
   99 00000104 E3A05C03        LDR              r5, =Hex_1  ;7 seg displays 1 
  100 00000108 0A00002F        BEQ              display
  101 0000010C         
  102 0000010C E3500032        CMP              r0, #50
  103 00000110 E59F5210        LDR              r5, =Hex_2  ;7 seg displays 2 e
                                                            tc...
  104 00000114 0A00002C        BEQ              display
  105 00000118         
  106 00000118 E3500033        CMP              r0, #51
  107 0000011C E59F5208        LDR              r5, =Hex_3
  108 00000120 0A000029        BEQ              display
  109 00000124         
  110 00000124 E3500034        CMP              r0, #52
  111 00000128 E3A05CA3        LDR              r5, =Hex_4
  112 0000012C 0A000026        BEQ              display
  113 00000130         
  114 00000130 E3500035        CMP              r0, #53
  115 00000134 E59F51F4        LDR              r5, =Hex_5
  116 00000138 0A000023        BEQ              display
  117 0000013C         
  118 0000013C E3500036        CMP              r0, #54
  119 00000140 E59F51EC        LDR              r5, =Hex_6
  120 00000144 0A000020        BEQ              display
  121 00000148         
  122 00000148 E3500037        CMP              r0, #55
  123 0000014C E3A05D0E        LDR              r5, =Hex_7
  124 00000150 0A00001D        BEQ              display
  125 00000154         
  126 00000154 E3500038        CMP              r0, #56
  127 00000158 E59F51D8        LDR              r5, =Hex_8



ARM Macro Assembler    Page 5 


  128 0000015C 0A00001A        BEQ              display
  129 00000160         
  130 00000160 E3500039        CMP              r0, #57
  131 00000164 E59F51D0        LDR              r5, =Hex_9
  132 00000168 0A000017        BEQ              display
  133 0000016C         
  134 0000016C E3500041        CMP              r0, #65
  135 00000170 E59F51C8        LDR              r5, =Hex_a
  136 00000174 0A000014        BEQ              display
  137 00000178         
  138 00000178 E3500042        CMP              r0, #66
  139 0000017C E3A05CB6        LDR              r5, =Hex_b
  140 00000180 0A000011        BEQ              display
  141 00000184         
  142 00000184 E3500043        CMP              r0, #67
  143 00000188 E3A05DD2        LDR              r5, =Hex_c
  144 0000018C 0A00000E        BEQ              display
  145 00000190         
  146 00000190 E3500044        CMP              r0, #68
  147 00000194 E3A05C97        LDR              r5, =Hex_d
  148 00000198 0A00000B        BEQ              display
  149 0000019C         
  150 0000019C E3500045        CMP              r0, #69
  151 000001A0 E59F519C        LDR              r5, =Hex_e
  152 000001A4 0A000008        BEQ              display
  153 000001A8         
  154 000001A8 E3500046        CMP              r0, #70
  155 000001AC E59F5194        LDR              r5, =Hex_f
  156 000001B0 0A000005        BEQ              display
  157 000001B4         
  158 000001B4 E3500047        CMP              r0, #71
  159 000001B8 E3A05902        LDR              r5, =Hex_g
  160 000001BC 0A000002        BEQ              display
  161 000001C0         
  162 000001C0 E3500048        CMP              r0, #72
  163 000001C4 E59F5158        LDR              r5, =Hex_off
  164 000001C8 0A000001        BEQ              off_seg
  165 000001CC         
  166 000001CC         display
  167 000001CC E5825000        STR              r5, [r2]    ; stores the hexade
                                                            cimal to IO0SET reg
                                                            ister
  168 000001D0 EA000005        B                seg_store
  169 000001D4         
  170 000001D4         off_seg
  171 000001D4 E5835000        STR              r5, [r3]
  172 000001D8 E59F3144        LDR              r3, =Hex_off
  173 000001DC         
  174 000001DC E3500047        CMP              r0, #71     ;This allows g segm
                                                            ent to be turned on
                                                             at the start, lets
                                                             it be stored 
  175 000001E0 0A000001        BEQ              seg_store
  176 000001E4         
  177 000001E4 E1550003        CMP              r5, r3      ;This comparison pr
                                                            events the off stat
                                                            e to be stored as p
                                                            revious state
  178 000001E8 0A000000        BEQ              seg_exit



ARM Macro Assembler    Page 6 


  179 000001EC         
  180 000001EC         seg_store
  181 000001EC         
  182 000001EC E1A04000        MOV              r4, r0      ;stores current sta
                                                            te
  183 000001F0         
  184 000001F0         seg_exit
  185 000001F0         
  186 000001F0 E8BD402C        LDMFD            SP!,{r2,r3,r5,lr}
  187 000001F4 E12FFF1E        BX               lr
  188 000001F8         
  189 000001F8         
  190 000001F8         ;///////////////////////////////////////////////////////
                       // 
  191 000001F8         
  192 000001F8         uart_init
  193 000001F8 E92D4003        STMFD            SP!,{r0-r1,lr}
  194 000001FC E59F0148        LDR              r0, =0xE000C000 ;Base address 0
                                                            xE000C000
  195 00000200         
  196 00000200 E3A01083        MOV              r1, #0x83   ;Loads the bit 1000
                                                            0011 to the U0LCR
  197 00000204 E5C0100C        STRB             r1, [r0, #U0LCR]
  198 00000208         
  199 00000208 E3A01078        MOV              r1, #0x78   ;Loads the bit 1111
                                                            0000 to the Base ad
                                                            dress
  200 0000020C E5C01000        STRB             r1, [r0]
  201 00000210         
  202 00000210 E3A01000        MOV              r1, #0x0    ;Loads the bit 0000
                                                            0000 to the U0IER
  203 00000214 E5C01004        STRB             r1, [r0, #U0IER]
  204 00000218         
  205 00000218 E3A01003        MOV              r1, #0x3    ;Loads the bit 0000
                                                            0011 to the U0LCR
  206 0000021C E5C0100C        STRB             r1, [r0, #U0LCR]
  207 00000220         
  208 00000220 E8BD4003        LDMFD            sp!, {r0-r1,lr}
  209 00000224 E12FFF1E        BX               lr
  210 00000228         
  211 00000228         ;///////////////////////////////////////////////////////
                       //
  212 00000228         
  213 00000228         read_character
  214 00000228 E92D400E        STMFD            sp!,{r1,r2,r3,lr}
  215 0000022C         
  216 0000022C         read_character_begin
  217 0000022C E59F111C        LDR              r1, =0xE000C014
  218 00000230 E59F3114        LDR              r3, =0xE000C000
  219 00000234         
  220 00000234 E5D12000        LDRB             r2, [r1]    ;Pulls the bits out
                                                             from the line stat
                                                            us register to r2
  221 00000238 E2022001        AND              r2, r2, #1  ;Compares r2 to a b
                                                            it mask to isolate 
                                                            the first bit
  222 0000023C E3520000        CMP              r2, #0      ;When the first bit
                                                             is 0 there is char
                                                            acter in the reciev



ARM Macro Assembler    Page 7 


                                                            ing bufffer
  223 00000240         
  224 00000240 0AFFFFF9        BEQ              read_character_begin
  225 00000244         
  226 00000244 E5D30000        LDRB             r0, [r3]    ;Read byte from rec
                                                            eive register
  227 00000248         
  228 00000248 E8BD400E        LDMFD            sp!, {r1,r2,r3,lr}
  229 0000024C E12FFF1E        BX               lr
  230 00000250         
  231 00000250         ;///////////////////////////////////////////////////////
                       // 
  232 00000250         
  233 00000250         output_character
  234 00000250 E92D400E        STMFD            sp!,{r1,r2,r3,lr}
  235 00000254         
  236 00000254         output_character_begin
  237 00000254 E59F10F4        LDR              r1, =0xE000C014
  238 00000258 E59F30EC        LDR              r3, =0xE000C000
  239 0000025C         
  240 0000025C E5D12000        LDRB             r2, [r1]
  241 00000260 E2022020        AND              r2, r2, #THRE ; Isolates the TH
                                                            RE bit of the statu
                                                            s register and stor
                                                            es result to r5
  242 00000264 E3520020        CMP              r2, #THRE   ; Compares mask to 
                                                            isolated THRE bit
  243 00000268         
  244 00000268 1AFFFFF9        BNE              output_character_begin ; If the
                                                             isolated bit isn't
                                                             equal to the mask 
                                                            goes back to loop
  245 0000026C         
  246 0000026C E5C30000        STRB             r0, [r3]    ; Stores character 
                                                            to the transmit reg
                                                            ister
  247 00000270 E8BD400E        LDMFD            sp!, {r1,r2,r3,lr}
  248 00000274         
  249 00000274 E12FFF1E        BX               lr
  250 00000278         
  251 00000278         ;///////////////////////////////////////////////////////
                       //
  252 00000278         
  253 00000278         output_string
  254 00000278 E92D4000        STMFD            SP!,{lr}
  255 0000027C         output_string_begin
  256 0000027C E5D10000        LDRB             r0, [r1]
  257 00000280 E3500000        CMP              r0, #0      ; comparing for nul
                                                            l
  258 00000284 0A000002        BEQ              output_string_exit ;If characte
                                                            r is null branch to
                                                             the exit of output
                                                             string
  259 00000288         
  260 00000288 E2811001        ADD              r1, r1, #1  ;Increments index o
                                                            f the string to be 
                                                            printed
  261 0000028C EBFFFFFE        BL               output_character
  262 00000290 EAFFFFF9        B                output_string_begin ;branch to 



ARM Macro Assembler    Page 8 


                                                            the beginning 
  263 00000294         
  264 00000294         output_string_exit
  265 00000294 E8BD4000        LDMFD            sp!, {lr}   ;load return addres
                                                            s of lr
  266 00000298 E12FFF1E        BX               lr          ;branches back to m
                                                            ain code
  267 0000029C         
  268 0000029C         ;///////////////////////////////////////////////////////
                       // 
  269 0000029C         
  270 0000029C         read_string
  271 0000029C E92D4000        STMFD            SP!,{lr}
  272 000002A0         read_string_begin
  273 000002A0 EBFFFFFE        BL               read_character ;read inputed ch
                                                            aracter
  274 000002A4 E350000D        CMP              r0, #0xD    ; checking for ente
                                                            r
  275 000002A8 0A000003        BEQ              read_string_exit
  276 000002AC         
  277 000002AC E5810000        STR              r0, [r1]
  278 000002B0 E2811001        ADD              r1, r1, #1  ;Increments index o
                                                            f the string buffer
                                                            
  279 000002B4 EBFFFFFE        BL               output_character ;Echos read ch
                                                            aracter
  280 000002B8 EAFFFFF8        B                read_string_begin ;branch to th
                                                            e beginning 
  281 000002BC         
  282 000002BC         read_string_exit
  283 000002BC E3A00000        MOV              r0, #0
  284 000002C0 E5810000        STR              r0, [r1]
  285 000002C4         
  286 000002C4 E3A0000A        MOV              r0, #0xA    ; printing new line
                                                            
  287 000002C8 EBFFFFFE        BL               output_character
  288 000002CC E3A0000D        MOV              r0, #0xD    ; printing carriage
                                                             return
  289 000002D0 EBFFFFFE        BL               output_character
  290 000002D4         
  291 000002D4 E8BD4000        LDMFD            sp!, {lr}   ;load return addres
                                                            s of lr
  292 000002D8 E12FFF1E        BX               lr          ;branches back to m
                                                            ain code 
  293 000002DC         
  294 000002DC         
  295 000002DC         
  296 000002DC         ;///////////////////////////////////////////////////////
                       //////////////// 
  297 000002DC         setup
  298 000002DC         ;This subroutine sets up IO0DIR display on 7 segment
  299 000002DC         
  300 000002DC E92D400D        STMFD            sp!,{r0,r2,r3,lr}
  301 000002E0         
  302 000002E0 E59F206C        LDR              r2, =IO0DIR
  303 000002E4 E59F3038        LDR              r3, =0xB7A0
  304 000002E8 E5823000        STR              r3, [r2]    ;sets up the IO0DIR
                                                            
  305 000002EC         



ARM Macro Assembler    Page 9 


  306 000002EC E3A00047        MOV              r0, #71
  307 000002F0 EBFFFFFE        BL               display_digit_on_7_seg ;Turns o
                                                            n only the G segmen
                                                            t of the 7 segment 
                                                            display 
  308 000002F4         
  309 000002F4 E8BD400D        LDMFD            sp!,{r0,r2,r3,lr}
  310 000002F8 E12FFF1E        BX               lr
  311 000002FC         ;///////////////////////////////////////////////////////
                       // 
  312 000002FC         pin_connect_block_setup_for_uart0
  313 000002FC E92D4007        STMFD            sp!, {r0, r1, lr,r2}
  314 00000300 E59F0050        LDR              r0, =0xE002C000 ; PINSEL0
  315 00000304 E5901000        LDR              r1, [r0]
  316 00000308 E3811005        ORR              r1, r1, #5
  317 0000030C E3C1100A        BIC              r1, r1, #0xA
  318 00000310 E5801000        STR              r1, [r0]
  319 00000314 E8BD4007        LDMFD            sp!, {r0, r1, lr,r2}
  320 00000318 E12FFF1E        BX               lr
  321 0000031C         
  322 0000031C                 END
              E0028000 
              E002800C 
              0000B7A0 
              00009580 
              00008780 
              0000A680 
              0000B680 
              0000B780 
              0000A380 
              0000B380 
              0000B480 
              0000B080 
              E000C000 
              E000C014 
              E0028008 
              E002C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\library5.d -o.\objects\library5.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5
\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 524" --list=.\listings\library5.lst library5.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

buffer 00000000

Symbol: buffer
   Definitions
      At line 50 in file library5.s
   Uses
      None
Comment: buffer unused
clear 000000B8

Symbol: clear
   Definitions
      At line 65 in file library5.s
   Uses
      At line 73 in file library5.s
Comment: clear used once
clear_exit 000000D4

Symbol: clear_exit
   Definitions
      At line 75 in file library5.s
   Uses
      At line 68 in file library5.s
Comment: clear_exit used once
clear_string 000000B4

Symbol: clear_string
   Definitions
      At line 62 in file library5.s
   Uses
      None
Comment: clear_string unused
display 000001CC

Symbol: display
   Definitions
      At line 166 in file library5.s
   Uses
      At line 96 in file library5.s
      At line 100 in file library5.s
      At line 104 in file library5.s
      At line 108 in file library5.s
      At line 112 in file library5.s
      At line 116 in file library5.s
      At line 120 in file library5.s
      At line 124 in file library5.s
      At line 128 in file library5.s
      At line 132 in file library5.s
      At line 136 in file library5.s
      At line 140 in file library5.s
      At line 144 in file library5.s
      At line 148 in file library5.s
      At line 152 in file library5.s
      At line 156 in file library5.s
      At line 160 in file library5.s

display_digit_on_7_seg 000000DC

Symbol: display_digit_on_7_seg



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 80 in file library5.s
   Uses
      At line 8 in file library5.s
      At line 307 in file library5.s

lib 00000000

Symbol: lib
   Definitions
      At line 1 in file library5.s
   Uses
      None
Comment: lib unused
off_seg 000001D4

Symbol: off_seg
   Definitions
      At line 170 in file library5.s
   Uses
      At line 92 in file library5.s
      At line 164 in file library5.s

output_character 00000250

Symbol: output_character
   Definitions
      At line 233 in file library5.s
   Uses
      At line 3 in file library5.s
      At line 261 in file library5.s
      At line 279 in file library5.s
      At line 287 in file library5.s
      At line 289 in file library5.s

output_character_begin 00000254

Symbol: output_character_begin
   Definitions
      At line 236 in file library5.s
   Uses
      At line 244 in file library5.s
Comment: output_character_begin used once
output_string 00000278

Symbol: output_string
   Definitions
      At line 253 in file library5.s
   Uses
      At line 4 in file library5.s
Comment: output_string used once
output_string_begin 0000027C

Symbol: output_string_begin
   Definitions
      At line 255 in file library5.s
   Uses
      At line 262 in file library5.s
Comment: output_string_begin used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

output_string_exit 00000294

Symbol: output_string_exit
   Definitions
      At line 264 in file library5.s
   Uses
      At line 258 in file library5.s
Comment: output_string_exit used once
pin_connect_block_setup_for_uart0 000002FC

Symbol: pin_connect_block_setup_for_uart0
   Definitions
      At line 312 in file library5.s
   Uses
      At line 6 in file library5.s
Comment: pin_connect_block_setup_for_uart0 used once
prompt1 000000A9

Symbol: prompt1
   Definitions
      At line 51 in file library5.s
   Uses
      None
Comment: prompt1 unused
read_character 00000228

Symbol: read_character
   Definitions
      At line 213 in file library5.s
   Uses
      At line 2 in file library5.s
      At line 273 in file library5.s

read_character_begin 0000022C

Symbol: read_character_begin
   Definitions
      At line 216 in file library5.s
   Uses
      At line 224 in file library5.s
Comment: read_character_begin used once
read_string 0000029C

Symbol: read_string
   Definitions
      At line 270 in file library5.s
   Uses
      At line 5 in file library5.s
Comment: read_string used once
read_string_begin 000002A0

Symbol: read_string_begin
   Definitions
      At line 272 in file library5.s
   Uses
      At line 280 in file library5.s
Comment: read_string_begin used once
read_string_exit 000002BC




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: read_string_exit
   Definitions
      At line 282 in file library5.s
   Uses
      At line 275 in file library5.s
Comment: read_string_exit used once
seg_exit 000001F0

Symbol: seg_exit
   Definitions
      At line 184 in file library5.s
   Uses
      At line 178 in file library5.s
Comment: seg_exit used once
seg_store 000001EC

Symbol: seg_store
   Definitions
      At line 180 in file library5.s
   Uses
      At line 168 in file library5.s
      At line 175 in file library5.s

setup 000002DC

Symbol: setup
   Definitions
      At line 297 in file library5.s
   Uses
      At line 9 in file library5.s
Comment: setup used once
uart_init 000001F8

Symbol: uart_init
   Definitions
      At line 192 in file library5.s
   Uses
      At line 7 in file library5.s
Comment: uart_init used once
24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Hex_0 00003780

Symbol: Hex_0
   Definitions
      At line 29 in file library5.s
   Uses
      At line 95 in file library5.s
Comment: Hex_0 used once
Hex_1 00000300

Symbol: Hex_1
   Definitions
      At line 30 in file library5.s
   Uses
      At line 99 in file library5.s
Comment: Hex_1 used once
Hex_2 00009580

Symbol: Hex_2
   Definitions
      At line 31 in file library5.s
   Uses
      At line 103 in file library5.s
Comment: Hex_2 used once
Hex_3 00008780

Symbol: Hex_3
   Definitions
      At line 32 in file library5.s
   Uses
      At line 107 in file library5.s
Comment: Hex_3 used once
Hex_4 0000A300

Symbol: Hex_4
   Definitions
      At line 33 in file library5.s
   Uses
      At line 111 in file library5.s
Comment: Hex_4 used once
Hex_5 0000A680

Symbol: Hex_5
   Definitions
      At line 34 in file library5.s
   Uses
      At line 115 in file library5.s
Comment: Hex_5 used once
Hex_6 0000B680

Symbol: Hex_6
   Definitions
      At line 35 in file library5.s
   Uses
      At line 119 in file library5.s
Comment: Hex_6 used once
Hex_7 00000380

Symbol: Hex_7



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 36 in file library5.s
   Uses
      At line 123 in file library5.s
Comment: Hex_7 used once
Hex_8 0000B780

Symbol: Hex_8
   Definitions
      At line 37 in file library5.s
   Uses
      At line 127 in file library5.s
Comment: Hex_8 used once
Hex_9 0000A380

Symbol: Hex_9
   Definitions
      At line 38 in file library5.s
   Uses
      At line 131 in file library5.s
Comment: Hex_9 used once
Hex_a 0000B380

Symbol: Hex_a
   Definitions
      At line 39 in file library5.s
   Uses
      At line 135 in file library5.s
Comment: Hex_a used once
Hex_b 0000B600

Symbol: Hex_b
   Definitions
      At line 40 in file library5.s
   Uses
      At line 139 in file library5.s
Comment: Hex_b used once
Hex_c 00003480

Symbol: Hex_c
   Definitions
      At line 41 in file library5.s
   Uses
      At line 143 in file library5.s
Comment: Hex_c used once
Hex_d 00009700

Symbol: Hex_d
   Definitions
      At line 42 in file library5.s
   Uses
      At line 147 in file library5.s
Comment: Hex_d used once
Hex_e 0000B480

Symbol: Hex_e
   Definitions
      At line 43 in file library5.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 151 in file library5.s
Comment: Hex_e used once
Hex_f 0000B080

Symbol: Hex_f
   Definitions
      At line 44 in file library5.s
   Uses
      At line 155 in file library5.s
Comment: Hex_f used once
Hex_g 00008000

Symbol: Hex_g
   Definitions
      At line 28 in file library5.s
   Uses
      At line 159 in file library5.s
Comment: Hex_g used once
Hex_off 0000B7A0

Symbol: Hex_off
   Definitions
      At line 45 in file library5.s
   Uses
      At line 91 in file library5.s
      At line 163 in file library5.s
      At line 172 in file library5.s

IO0CLR E002800C

Symbol: IO0CLR
   Definitions
      At line 23 in file library5.s
   Uses
      At line 88 in file library5.s
Comment: IO0CLR used once
IO0DIR E0028008

Symbol: IO0DIR
   Definitions
      At line 21 in file library5.s
   Uses
      At line 302 in file library5.s
Comment: IO0DIR used once
IO0SET E0028000

Symbol: IO0SET
   Definitions
      At line 22 in file library5.s
   Uses
      At line 87 in file library5.s
Comment: IO0SET used once
IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 19 in file library5.s
   Uses
      None



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

Comment: IO1CLR unused
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 17 in file library5.s
   Uses
      None
Comment: IO1DIR unused
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 18 in file library5.s
   Uses
      None
Comment: IO1PIN unused
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 20 in file library5.s
   Uses
      None
Comment: IO1SET unused
PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 24 in file library5.s
   Uses
      None
Comment: PINSEL0 unused
Seg 0000B7A0

Symbol: Seg
   Definitions
      At line 27 in file library5.s
   Uses
      None
Comment: Seg unused
THRE 00000020

Symbol: THRE
   Definitions
      At line 16 in file library5.s
   Uses
      At line 241 in file library5.s
      At line 242 in file library5.s

U0IER 00000004

Symbol: U0IER
   Definitions
      At line 14 in file library5.s
   Uses
      At line 203 in file library5.s
Comment: U0IER used once
U0LCR 0000000C



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols


Symbol: U0LCR
   Definitions
      At line 15 in file library5.s
   Uses
      At line 197 in file library5.s
      At line 206 in file library5.s

U0LSR 00000014

Symbol: U0LSR
   Definitions
      At line 13 in file library5.s
   Uses
      None
Comment: U0LSR unused
31 symbols
389 symbols in table
